WidgetsExample: #you can change the different interfaces when you type this


<WidgetsExample>:
    cols: 3
    #first row would be the ToggleButton, Button and label
    #second row would be the switch, slider and the boy layout


    #this toggle button actually has a state: down (when it is pressed) and normal (when it is back again)
    ToggleButton:
        text:"OFF"
        on_state: root.on_toggle_button_state(self) #passing self argument
        size_hint: None, 1 #width , height
        width: "100dp"

    Button:
        text: "Counter Click"
        on_press : root.on_button_click() #handling event of a button click

        #the "not" syntax is doing the opposite of what root.counter_on is passing/doing
        disabled: not root.counter_on #this would disable the button, not allowing it to press

    Label:
        text: root.my_text
        # font_size: "80dp" #edit font size
        color: 1,0.5 , 1, 1

    Switch:

        id:my_switch
        size_hint: None, 1 #width , height
        width: "100dp" # we need this because if we set it to 100dp, the switch will not interfere with the counter click
        active: True #by default, the switch is turned on/ is active and the user can change it later

    Slider:
        id: my_slider #this ID's purpose is to make sure other widgets can use it's values

        #setting up values for the switch
        min: 0
        max: 100
        value: 50

        orientation: "vertical" #the vertial orientation would be the slider orientation
        on_value: root.on_slider_value(self)
        disabled: not my_switch.active #the my_switch is the ID (from the Switch!). The active state means if it is active or not



    #Making a progress bar where the
    BoxLayout:
        orientation: "vertical" #you would need to change the orientation for the positioning of things!
        Label:
            text: str(int(my_slider.value)) #inheriting with the id slider, you can take its properties and take its value
        ProgressBar:
            max:100
            value: my_slider.value



<PageLayoutExample@PageLayout>:
    #page layout gives use to scroll horizontally

    #these can be the children as we have previously designed
    MainWidget:
    BoxLayoutExample:
    AnchorLayoutExample:
    GridLayoutExample:


<ScrollViewExample@ScrollView>:
    StackLayoutExample:
        size_hint: 1 , None #horizontal is 1 and vertical is none
        height: self.minimum_height #this makes the scrollview to scroll it just enough for making it possible to see the contents!
    #scroll view can only take 1 child!



<StackLayoutExample>:
    # left-right, top-bottom
    # orientation : "rl-tb" #right to left , top to bottom
    # padding: ("20dp", "20dp", "20dp","20dp")
    # spacing: "20dp", "20dp" #horizontally, vertically are 20dp



<GridLayoutExample@GridLayout>:
    #this layout needs 2 things: rows and collumns
    rows:2

    Button:
        text:"A"
        size_hint: 0.5, 0.1 #when you see the display, the collumn of A has also D in it so you have to define it in button D as well

    #this layout from the boxlayoutexample would be in the second collumn and first row!
    BoxLayoutExample:

    Button:
        text:"C"

    Button:
        text:"D"
        size_hint: 0.5,0.1 #as explained in D

    Button:
        text:"E"
    Button:
        text:"F"




<AnchorLayoutExample>:

    #can only have one anchor_x and one anchor_y in one anchor layout!

    #anchor_x options : right,left,center
    anchor_x: "center"

    #anchor_y options: bottom,top,center
    anchor_y: "bottom"

    BoxLayout:
        size_hint: 0.2,0.2
        Button:
            text:"A"
            size_hint:0.1,0.1

        Button:
            text:"B"
            size_hint:0.3,0.3




<BoxLayoutExample>:

    #the main orientation of the layout
    orientation: "horizontal" #changing orientation will affect the buttons

    Button:
        text:"A"
        size_hint: 0.5,None
        pos_hint: {'center_y': 0.5}

    #embedding the layouts in it
    BoxLayout:
        orientation: "vertical"
        spacing: "10dp"
        Button:
            text:"B1"
        Button:
            text:"B2"
        Button:
            text:"B3"

    BoxLayout:
        orientation:"vertical"

        Label:
            text:"label1"

        Label:
            text:"label2"



<MainWidget>:
    Button:
        text: "Hello"
        size: "40dp", "40dp"
        pos: "100dp", "200dp"

    Button:
        text: "Hello2"
        size: "40dp" , "40dp"
        pos: "200dp", "300dp"

    Label:
        text: "label!"
        size: "40dp", "40dp"
        pos:"300dp","400dp"
        color: 1,0,0,1


#NOTES:
#Button:
        #text: "A"

        #1st setting:
        #we use the size hint to make sure that the width and height is proportion to the screen
        #size_hint: 0.8, 0.5 #proportion of button is 80% width and 50% height

        #2nd setting:
        #size_hint: 1, None #the height is 1 only but the height is None(means that the height is nothing in perspective)
        #height:"60dp" #now the height is fixed

        #3rd setting
        #size_hint: 0.5, 0.5 #so, the height is fixed to 0.5 proportion but no fixed width

        #to move position, you need to use these:
        #pos_hint : {}
        #where inside the brackets could be:
            #x, center_x, right for the horizontal
            #y, center_y, top for the vertical

        #pos_hint: {"x": 0.5} #changing the most left of the button relative horizontal position to the 0.5
        #pos_hint: {"y" : 0.5} #???

